@page "/"
@using Raven.Client.Documents
@using System.Globalization
@inject IJSRuntime JSRuntime
    <h1>Lista - @Tasks.Count elementów</h1>
    @if (Tasks == null)
    {
        <p>Lista jest pusta</p>
    }
    else
    {
        i = 1;
        <ul>
            @foreach (var item in Tasks.OrderBy(t => t.SortId))
            {
                <li>
                    <div class="task-line">
                        <div class="task-name @(item.isDone ? "isDone" : "isNotDone")">@item.SortId. <input @bind="item.WhatToDo" class="@(item.isDone ? "isDone" : "isNotDone") @(item.isDisabled ? "isDisabled" : "isNotDisabled")" disabled="@item.isDisabled" /></div> &ensp;
                        <Switch class="task-checkbox" @onclick="() => changeTaskStatus(item)" @bind-Value="item.isDone" checked="@item.isDone"/> &ensp;
                        @if (item.isDisabled)
                        {
                            <button class="edButton" @onclick="() => Edit(item)"><Icon Name="IconName.Pencil"/></button>   
                        }
                        else
                        {
                            <button class="saveButton" @onclick="() => Save(item)"><Icon Name="IconName.Save"/></button>
                        }
                        <button class="delButton" @onclick="() => Delete(item)"><Icon Name="IconName.Trash"/></button> &ensp;
                    </div>
                </li>
                i++;
            }
        </ul>
    }
    <hr/>
    <h2>Dodawanie zadań do listy</h2>
    <br/>
    <label for="addTask">Napisz nowe zadanie</label>
    <input @bind="InputValue" name="addTask" type="text" />
    <Button Color="ButtonColor.Primary" @onclick="AddItem">Dodaj</Button>
    <hr/>
    <div class="edit-menu" style="@editStyles">
        <h2>Edytowanie treści zadania z listy</h2>
        <br/>
        <label for="oldinputvalue">Edytujesz: </label>
        <input @bind="OldInputValue" name="oldinputvalue" disabled>
        <label for="newinputvalue"> Na: </label>
        <input @bind="EditInputValue" name="newinputvalue" type="text" />
        <Button Color="ButtonColor.Warning" @onclick="EditValue">Edytuj</Button>
    </div>
    <div class="task-table">
        <table>
            <tr>
                <th>ID</th>
                <th>Zadanie</th>
                <th>Czy zrobione?</th>
                <th>Czy Wyłączony?</th>
            </tr>
            @foreach (var item in Tasks.OrderBy(t => t.SortId))
            {
                <tr>
                    <td>@item.SortId</td>
                    <td>@item.WhatToDo</td>
                    <td class="@(item.isDone ? "true" : "false")">@item.isDone</td>
                    <td class="@(item.isDisabled ? "true" : "false")">@item.isDisabled</td>
                </tr>
            }
        </table>
    </div>
    @code {
        public int i { get; set; }
        public int najwiekszeId { get; set; }
        private string InputValue { get; set; }
        private string OldInputValue { get; set; }
        private string editStyles = "visibility: hidden;";
        public string taskId { get; set; }
        private string EditInputValue { get; set; }
        private List<Data.Task> Tasks { get; set; }
        private bool isDone { get; set; }
        private DocumentStore store;
        
        private void changeTaskStatus(Data.Task selectedTask)
        {       
            using var session = store.OpenSession();
            Data.Task loadedTask = session.Load<Data.Task>(selectedTask.Id);
            loadedTask.isDone = !loadedTask.isDone;
            session.SaveChanges();
            Tasks = session.Query<Data.Task>().ToList();
        }
        private void Delete(Data.Task selectedTask)
        {
            using var session = store.OpenSession();
            Data.Task loadedTask = session.Load<Data.Task>(selectedTask.Id);
            session.Delete(loadedTask);
            session.SaveChanges();
            Tasks = session.Query<Data.Task>().ToList();
            OldInputValue = "";
        }

        private void Edit(Data.Task selectedTask)
        {
                using var session = store.OpenSession();
                Data.Task loadedTask = session.Load<Data.Task>(selectedTask.Id);
                OldInputValue = loadedTask.WhatToDo;
                taskId = loadedTask.Id;
                loadedTask.isDisabled = !loadedTask.isDisabled;
                session.SaveChanges();
                Tasks = session.Query<Data.Task>().ToList();
        }

        private void Save(Data.Task selectedTask)
        {
                using var session = store.OpenSession();
                Data.Task loadedTask = session.Load<Data.Task>(selectedTask.Id);
                loadedTask.WhatToDo = selectedTask.WhatToDo;
                loadedTask.isDisabled = !loadedTask.isDisabled;
                session.SaveChanges();
                Tasks = session.Query<Data.Task>().ToList();
                JSRuntime.InvokeVoidAsync("alert", "Pomyslnie zmieniono nazwe zadania z \"" + OldInputValue + "\" na \"" + EditInputValue + "\"");
                EditInputValue = "";
                OldInputValue = "";
                editStyles = "visibility: hidden;";
            }
        }
        private async Task AddItem()
        {
            if (string.IsNullOrEmpty(InputValue))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Błąd! Pole tekstowe nie może być puste!");
            }
            else
            {
                using var session = store.OpenSession();
                session.Store(new Data.Task { WhatToDo = InputValue, isDone = isDone, SortId = Tasks[Tasks.Count - 1].SortId + 1, isDisabled = true});
                session.SaveChanges();  
                Tasks = session.Query<Data.Task>().ToList();
                InputValue = "";
            }
        }
        protected override async Task OnInitializedAsync()
        {
            store = new DocumentStore
            {
                Urls = new string[] { "http://localhost:8080" },
                Database = "Tasks",
            };
            store.Initialize();

            using var session = store.OpenSession();
            Tasks = session.Query<Data.Task>().ToList();
        }
    }
