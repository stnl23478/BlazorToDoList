@page "/"
@namespace ToDoList
@using Raven.Client.Documents
@using Raven.Client.Documents.Linq
@inject IJSRuntime JSRuntime

<h1>Lista - @Tasks.Count elementów</h1>
<select @onchange="fliterList">
    <option value="all">Wszystkie</option>
    <option value="notDone">Niewykonane</option>
</select>
<br/>
    @if (Tasks == null)
    {
        <p>Lista jest pusta</p>
    }
    else
    {
        <ul>
            @foreach (var item in Tasks.OrderBy(t => t.WhenAdded))
            {
                <div>
                    <ToDoList.Client.Components.TaskItem Item="@item" OnChange="@SaveTask"  OnDelete="@DeleteTask"/>
                </div>
            }
            <form @onsubmit=addTask>
                @* @onfocusout=@addTask *@
                <div class="dataInputy">
                    <input @bind="newTask" @bind:event="oninput" name="newTask" class="newTaskInput" placeholder="Wpisz nowe zadanie" style="width: fit-content !important; font-size: 16px; height: 30px; background-image:none; background-color:transparent; -webkit-box-shadow: none; -moz-box-shadow: none; box-shadow: none;">
                    <SfDateTimePicker TValue="DateTime?" @bind="StartTime" FullScreen="true" ShowClearButton="true"></SfDateTimePicker>
                    <SfDateTimePicker TValue="DateTime?" @bind="EndTime" FullScreen="true" ShowClearButton="true"></SfDateTimePicker>
                    <Button Color="ButtonColor.Primary" @onclick="@addTask"> Stwórz </Button>
                </div>
            </form>
        </ul>
    }
<SfSchedule TValue=Data.Task>
    <ScheduleEventSettings DataSource="@Tasks">
        <ScheduleField Id="Id">
            <FieldSubject Name="WhatToDo"></FieldSubject>
            <FieldStartTime Name="StartTime"></FieldStartTime>
            <FieldEndTime Name="EndTime"></FieldEndTime>
            <FieldRecurrenceRule Name="ShipRegion"></FieldRecurrenceRule>
            <FieldDescription Name="isDone"></FieldDescription>
        </ScheduleField>        
    </ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Day"></ScheduleView>
        <ScheduleView Option="View.Week"></ScheduleView>
        <ScheduleView Option="View.WorkWeek"></ScheduleView>
        <ScheduleView Option="View.Month"></ScheduleView>
        <ScheduleView Option="View.Agenda"></ScheduleView>
    </ScheduleViews>
</SfSchedule>

@code {
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public int i { get; set; }
        private string editStyles = "visibility: hidden;";
        public string newTask { get; set; }
        public List<Data.Task> Tasks { get; set; }
        private DocumentStore store;
        private string selectedFilter = "all";
        private DateOnly forWhen = DateOnly.FromDateTime(DateTime.Now.AddDays(1));
        private TimeOnly fromTime = TimeOnly.FromDateTime(DateTime.Now);
        private TimeOnly untilTime = TimeOnly.FromDateTime(DateTime.Now.AddHours(1));

        private void fliterList(ChangeEventArgs e)
        {
            selectedFilter = e.Value?.ToString();
            Refresh();
        }

        private void Refresh()
        {
            using var session = store.OpenSession();
            var query = session.Query<Data.Task>();
            if (selectedFilter == "notDone")
                query = query.Where(w => w.isDone == false);
            Tasks = query.ToList();
        }

        private void SaveTask(Data.Task item)
        {       
            using var session = store.OpenSession();
            Data.Task loadedTask = session.Load<Data.Task>(item.Id);
            loadedTask.WhatToDo = item.WhatToDo;
            loadedTask.isDone = item.isDone;
            loadedTask.StartTime = item.StartTime;
            loadedTask.EndTime = item.EndTime;
            session.SaveChanges();
            Refresh();
        }
        private void DeleteTask(Data.Task item)
        {
            using var session = store.OpenSession();
            Data.Task loadedTask = session.Load<Data.Task>(item.Id);
            session.Delete(loadedTask);
            session.SaveChanges();
            Refresh();
        }
        private void addTask()
        {
            if (!string.IsNullOrEmpty(newTask))
            {
                using var session = store.OpenSession();
                session.Store(new Data.Task { WhatToDo = newTask, isDone = false, WhenAdded = DateTime.Now});
                session.SaveChanges();
                Tasks = session.Query<Data.Task>().ToList();
                newTask = "";
            }
        }
        protected override async Task OnInitializedAsync()
        {
            store = new DocumentStore
            {
                Urls = new string[] { "http://localhost:8080" },
                Database = "Tasks",
            };
            store.Initialize();
            Refresh();
        }
    }

