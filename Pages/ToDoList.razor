@page "/"
@namespace ToDoList
@using Raven.Client.Documents
@using Raven.Client.Documents.Linq
@inject IJSRuntime JSRuntime

<h1>Lista - @Tasks.Count elementów</h1>
<select @onchange="fliterList">
    <option value="all">Wszystkie</option>
    <option value="notDone">Niewykonane</option>
</select>
<br/>
    @if (Tasks == null)
    {
        <p>Lista jest pusta</p>
    }
    else
    {
        <ul>
            @foreach (var item in Tasks.OrderBy(t => t.WhenAdded))
            {
                <div>
                    <ToDoList.Client.Components.TaskItem Item="@item" OnChange="@SaveTask"  OnDelete="@DeleteTask"/>
                </div>
            }
            <br/>
            <hr/>
            <form @onsubmit=addTask>
                @* @onfocusout=@addTask *@
                <label for="newTask">Nowe zadanie</label>
                <input @bind="newTask" @bind:event="oninput" name="newTask" class="newTaskInput">
                <br/>
                <label for="taskDate">Data</label>
                <DateInput TValue="DateOnly" @bind-Value="@forWhen" Placeholder="Enter Date" name="taskDate"/>
                <br/>
                <label for="odKiedy">Od Której?</label>
                <TimeInput TValue="TimeOnly" @bind-Value="fromTime" name="odKiedy"/>
                <br/>
                <label for="doKiedy">Do Której?</label>
                <TimeInput TValue="TimeOnly" @bind-Value="untilTime" name="doKiedy"/>
                <br/>
                <Button Color="ButtonColor.Primary"> Stwórz </Button>
            </form>
        </ul>
    }
    <div class="task-table">
        <table>
            <tr>
                <th>ID</th>
                <th>Zadanie</th>
                <th>Czy Zrobione?</th>
                <th>Data Dodania</th>
                <th>Na kiedy?</th>
                <th>Od której?</th>
                <th>Do której?</th>
            </tr>
            @foreach (var item in Tasks.OrderBy(o => o.WhenAdded))
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.WhatToDo</td>
                    <td class="@(item.isDone ? "true" : "false")">@item.isDone</td>
                    <td>@item.WhenAdded</td>
                    <td>@item.forWhen</td>
                    <td>@item.fromTime</td>
                    <td>@item.untilTime</td>
                </tr>
            }
        </table>
    </div>
    @code {
        private string editStyles = "visibility: hidden;";
        public string newTask { get; set; }
        public List<Data.Task> Tasks { get; set; }
        private DocumentStore store;
        private string selectedFilter = "all";
        private DateOnly forWhen = DateOnly.FromDateTime(DateTime.Now.AddDays(1));
        private TimeOnly fromTime = TimeOnly.FromDateTime(DateTime.Now);
        private TimeOnly untilTime = TimeOnly.FromDateTime(DateTime.Now.AddHours(1));

        private void fliterList(ChangeEventArgs e)
        {
            selectedFilter = e.Value?.ToString();
            Refresh();
        }

        private void Refresh()
        {
            using var session = store.OpenSession();
            var query = session.Query<Data.Task>();
            if (selectedFilter == "notDone")
                query = query.Where(w => w.isDone == false);
            Tasks = query.ToList();
        }

        private void SaveTask(Data.Task item)
        {       
            using var session = store.OpenSession();
            Data.Task loadedTask = session.Load<Data.Task>(item.Id);
            loadedTask.WhatToDo = item.WhatToDo;
            loadedTask.isDone = item.isDone;
            session.SaveChanges();
            Refresh();
        }
        private void DeleteTask(Data.Task item)
        {
            using var session = store.OpenSession();
            Data.Task loadedTask = session.Load<Data.Task>(item.Id);
            session.Delete(loadedTask);
            session.SaveChanges();
            Refresh();
        }
        private void addTask()
        {
            if (!string.IsNullOrEmpty(newTask))
            {
                using var session = store.OpenSession();
                session.Store(new Data.Task { WhatToDo = newTask, isDone = false, WhenAdded = DateTime.Now, forWhen = forWhen, fromTime = fromTime, untilTime = untilTime});
                session.SaveChanges();
                Tasks = session.Query<Data.Task>().ToList();
                newTask = "";
            }
        }
        protected override async Task OnInitializedAsync()
        {
            store = new DocumentStore
            {
                Urls = new string[] { "http://localhost:8080" },
                Database = "Tasks",
            };
            store.Initialize();
            Refresh();
        }
    }

